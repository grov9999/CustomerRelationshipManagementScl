BROKER SCHEMA ace.bus.api.getRetrieve
PATH pe.ibk.common, pe.ibk.common.audit;

CREATE COMPUTE MODULE getRetrieveCICS_PrepareReq
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE refParametersIn REFERENCE TO InputLocalEnvironment.REST.Input.Parameters;
		DECLARE codigo REFERENCE TO InputLocalEnvironment.REST.Input.Parameters.accountsExecutived;
		DECLARE refBody REFERENCE TO InputRoot.JSON.Data;
		DECLARE refEnv REFERENCE TO Environment;
		DECLARE refEnvAudit REFERENCE TO refEnv.Audit;
		DECLARE refOut REFERENCE TO OutputRoot;
		
		--Audit input data
		CALL getInputDataAudit(refEnv, InputLocalEnvironment, InputRoot);
		
		CALL setPropertiesMessage(refOut, getENCODING_HOST(),getCCSID_HOST());
		
		--Set Service secuence
		SET refEnv.Srv.Secuence = '01';

		CREATE LASTCHILD OF OutputRoot DOMAIN 'DFDL';
		DECLARE refBodyOut REFERENCE TO OutputRoot.DFDL;

		CALL prepareDataRequestCICS(refBodyOut, refEnv,refParametersIn, refBody,codigo);
		CALL setConfigPropertiesCICS(OutputLocalEnvironment,refEnv);
		
		--Audit request data
		CALL setMonitoringRequestTime(refEnv);
		CALL getRequestDataAudit(refEnv, OutputRoot, OutputLocalEnvironment);
		
		SET Environment.GROVER.DataCICS = CAST( ASBITSTREAM(OutputRoot.DFDL CCSID getCCSID_HOST() ENCODING getENCODING_HOST()) AS CHARACTER CCSID getCCSID_HOST() ENCODING getENCODING_HOST());
		PROPAGATE TO LABEL 'localFlow';

		RETURN FALSE;
	END;
END MODULE;

CREATE COMPUTE MODULE getRetrieveCICS_PrepareRes
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL setMonitoringResponseTime( Environment );
		    		
    	DECLARE chrTramaOut CHARACTER ;
		SET chrTramaOut = CAST(InputRoot.BLOB.BLOB AS CHARACTER CCSID InputRoot.Properties.CodedCharSetId);
		
		SET Environment.data.chrTramaOut = chrTramaOut;
		
		DECLARE chrCodRes CHARACTER SUBSTRING(chrTramaOut FROM C_IND_COD_RESP FOR C_LNG_COD_RESP);
		DECLARE chrCodMsg CHARACTER SUBSTRING(chrTramaOut FROM C_IND_MSG_RESP FOR C_LNG_MSG_RESP);

		SET chrCodRes = RIGHT(C_CICS_OK_RESP || TRIM(chrCodRes),4);

		CALL createResponseStatus(Environment,NULL,0,'EJECUCION CON EXITO',chrCodRes,chrCodMsg);
		
		CALL isSuccessCategoryCICS(Environment.StatusRes,Environment,Environment.Equivalencias);
		DECLARE responseType INTEGER COALESCE(Environment.StatusRes.status.responseType, -1);
		
		--IF chrCodRes = C_CICS_OK_RESP OR responseType = 0 THEN
			CALL createHeaderBus(OutputRoot,Environment);
			CALL parsingTramaCICS(InputRoot,Environment,C_NS);
			CALL prepareResponseJSON(OutputRoot,Environment);
		--ELSE
			--CALL createHeaderErrorCICS(OutputRoot,Environment,OutputLocalEnvironment,chrCodRes,4,chrCodMsg);
    	--END IF;		
    	
    	/* Audit response and reply data */
		CALL setMonitoringEndTime( Environment );
		CALL getResponseDataAudit( Environment, OutputRoot, OutputLocalEnvironment, 'S' );

		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE getRetrieveCICS_PrepareError
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		CALL setMonitoringResponseTime(Environment);

		IF(InputLocalEnvironment.CICS.AbendCode IS NOT NULL) THEN
			CALL createResponseStatus(Environment,getTIP_RSPTA_3(),getCOD_ERROR_302(),getEST_MSG_503(),InputLocalEnvironment.CICS.AbendCode,InputLocalEnvironment.CICS.AbendCode);
		ELSE
			CALL createResponseStatus(Environment,getTIP_RSPTA_3(),0,getEST_MSG_503(),NULL,NULL);
			CALL createStatusErrorCICS(InputExceptionList,Environment.StatusRes);
		END IF;
		
		IF(Environment.Parametros.{Environment.Operataion}.EQUIVRES = 'S') THEN
			IF (FIELDNAME(Environment.StatusRes.status) IS NOT NULL) THEN
				SET Environment.StatusRes.status.srvResponseCode	= COALESCE(Environment.Equivalencias.{Environment.Operation}.{'CODEQV_'||InputLocalEnvironment.CICS.AbendCode},InputLocalEnvironment.CICS.AbendCode);
				SET Environment.StatusRes.stauts.srvResponseMessage = COALESCE(Environment.Equivalencias.{Environment.Operation}.{'DESEQV_'||InputLocalEnvironment.CICS.AbendCode},InputLocalEnvironment.CICS.AbendCode);
			END IF;
		END IF;
		
		SET OutputLocalEnvironment.Destination.HTTP.ReplyStatusCode = getEST_COD_503();
		CALL createHeaderBus(OutputRoot,Environment);
		
--		Store the exception in the environment
		SET Environment.DataAudit.ExceptionDetail = getFullExceptionDetail(InputExceptionList);
		
--		Audit response and reply data
		CALL setMonitoringEndTime(Environment);
		CALL getResponseDataAudit(Environment, OutputRoot, OutputLocalEnvironment, '5');

		RETURN TRUE;
	END;
END MODULE;


CREATE COMPUTE MODULE getRetrieveCICS_Local_MockResponse
	CREATE FUNCTION Main() RETURNS BOOLEAN
	BEGIN
		
		DECLARE refParametersIn REFERENCE TO InputLocalEnvironment.REST.Input.Parameters;
		DECLARE refInput REFERENCE TO InputRoot.DFDL;
		DECLARE refEnv REFERENCE TO Environment;
		DECLARE refEnvAudit REFERENCE TO refEnv.Audit;
		
		DECLARE refMessageIn REFERENCE TO refInput.{C_NS}:MESSAGEHOST;
		CREATE FIELD refMessageIn.BODY.SCLCA031_DATOS_OUTPUT;
		DECLARE refDfdlBody REFERENCE TO refMessageIn.BODY.SCLCA031_DATOS_OUTPUT;
		SET refDfdlBody.SCLCA031_CO_RETU_O = '1';
		SET refDfdlBody.SCLCA031_CO_RETU_CICS_O = '2';
		SET refDfdlBody.SCLCA031_CO_RETU_DB2_O = '3';
		SET refDfdlBody.SCLCA031_DE_ERROR_O = '4';
		SET refDfdlBody.SCLCA031_ID_SCTA_O = '5';
		SET refDfdlBody.SCLCA031_NO_SCTA_O = '6';
		SET refDfdlBody.SCLCA031_FILLER_O = '7';
		
		
		--SET Environment.SALIDA_DFDL.BSEC710P_NUSLC = refDfdlBody.BSEC710P_NUSLC;
		SET refEnv.MOCK.SCLCA031_CO_RETU_O = refDfdlBody.SCLCA031_CO_RETU_O;
		SET refEnv.MOCK.SCLCA031_CO_RETU_CICS_O = refDfdlBody.SCLCA031_CO_RETU_CICS_O;
		SET refEnv.MOCK.SCLCA031_CO_RETU_DB2_O = refDfdlBody.SCLCA031_CO_RETU_DB2_O;
		SET refEnv.MOCK.SCLCA031_DE_ERROR_O = refDfdlBody.SCLCA031_DE_ERROR_O;
		SET refEnv.MOCK.SCLCA031_ID_SCTA_O = refDfdlBody.SCLCA031_ID_SCTA_O;
		SET refEnv.MOCK.SCLCA031_NO_SCTA_O = refDfdlBody.SCLCA031_NO_SCTA_O;
		SET refEnv.MOCK.SCLCA031_FILLER_O = refDfdlBody.SCLCA031_FILLER_O;
		
		CREATE LASTCHILD OF OutputRoot DOMAIN 'BLOB';
		CREATE FIELD OutputRoot.BLOB.BLOB;
		CREATE FIELD OutputRoot.Properties.CodedCharSetId;
		SET OutputRoot.Properties = InputRoot.Properties;
		DECLARE tramaInput CHARACTER '';
		SET tramaInput = CAST(ASBITSTREAM(refInput CCSID getCCSID_HOST() ENCODING getENCODING_HOST()) AS CHARACTER CCSID getCCSID_HOST() ENCODING getENCODING_HOST());
		SET OutputRoot.BLOB.BLOB = CAST(tramaInput AS BLOB CCSID OutputRoot.Properties.CodedCharSetId);

		RETURN TRUE;
	END;
END MODULE;
